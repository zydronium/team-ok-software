// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace TeamOk.WorkFrontend.Facade
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for WerkplekkenBackend.
    /// </summary>
    public static partial class WerkplekkenBackendExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='locationId'>
            /// </param>
            public static IList<FloorViewModel> ApiFloorsByLocationIdGet(this IWerkplekkenBackend operations, long locationId)
            {
                return Task.Factory.StartNew(s => ((IWerkplekkenBackend)s).ApiFloorsByLocationIdGetAsync(locationId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='locationId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<FloorViewModel>> ApiFloorsByLocationIdGetAsync(this IWerkplekkenBackend operations, long locationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiFloorsByLocationIdGetWithHttpMessagesAsync(locationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='locationId'>
            /// </param>
            /// <param name='value'>
            /// </param>
            public static void ApiFloorsByLocationIdPost(this IWerkplekkenBackend operations, long locationId, FloorViewModel value = default(FloorViewModel))
            {
                Task.Factory.StartNew(s => ((IWerkplekkenBackend)s).ApiFloorsByLocationIdPostAsync(locationId, value), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='locationId'>
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiFloorsByLocationIdPostAsync(this IWerkplekkenBackend operations, long locationId, FloorViewModel value = default(FloorViewModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiFloorsByLocationIdPostWithHttpMessagesAsync(locationId, value, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='locationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            public static FloorViewModel ApiFloorsByLocationIdByIdGet(this IWerkplekkenBackend operations, long locationId, long id)
            {
                return Task.Factory.StartNew(s => ((IWerkplekkenBackend)s).ApiFloorsByLocationIdByIdGetAsync(locationId, id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='locationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FloorViewModel> ApiFloorsByLocationIdByIdGetAsync(this IWerkplekkenBackend operations, long locationId, long id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiFloorsByLocationIdByIdGetWithHttpMessagesAsync(locationId, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='locationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='value'>
            /// </param>
            public static void ApiFloorsByLocationIdByIdPut(this IWerkplekkenBackend operations, long locationId, long id, FloorViewModel value = default(FloorViewModel))
            {
                Task.Factory.StartNew(s => ((IWerkplekkenBackend)s).ApiFloorsByLocationIdByIdPutAsync(locationId, id, value), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='locationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiFloorsByLocationIdByIdPutAsync(this IWerkplekkenBackend operations, long locationId, long id, FloorViewModel value = default(FloorViewModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiFloorsByLocationIdByIdPutWithHttpMessagesAsync(locationId, id, value, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='locationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiFloorsByLocationIdByIdDelete(this IWerkplekkenBackend operations, long locationId, long id)
            {
                Task.Factory.StartNew(s => ((IWerkplekkenBackend)s).ApiFloorsByLocationIdByIdDeleteAsync(locationId, id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='locationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiFloorsByLocationIdByIdDeleteAsync(this IWerkplekkenBackend operations, long locationId, long id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiFloorsByLocationIdByIdDeleteWithHttpMessagesAsync(locationId, id, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<LocationViewModel> ApiLocationsGet(this IWerkplekkenBackend operations)
            {
                return Task.Factory.StartNew(s => ((IWerkplekkenBackend)s).ApiLocationsGetAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LocationViewModel>> ApiLocationsGetAsync(this IWerkplekkenBackend operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiLocationsGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static LocationViewModel ApiLocationsByIdGet(this IWerkplekkenBackend operations, long id)
            {
                return Task.Factory.StartNew(s => ((IWerkplekkenBackend)s).ApiLocationsByIdGetAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LocationViewModel> ApiLocationsByIdGetAsync(this IWerkplekkenBackend operations, long id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiLocationsByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workSpaceId'>
            /// </param>
            /// <param name='value'>
            /// </param>
            public static void ApiNotificationsByWorkSpaceIdPost(this IWerkplekkenBackend operations, long workSpaceId, NotificationViewModel value = default(NotificationViewModel))
            {
                Task.Factory.StartNew(s => ((IWerkplekkenBackend)s).ApiNotificationsByWorkSpaceIdPostAsync(workSpaceId, value), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workSpaceId'>
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiNotificationsByWorkSpaceIdPostAsync(this IWerkplekkenBackend operations, long workSpaceId, NotificationViewModel value = default(NotificationViewModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiNotificationsByWorkSpaceIdPostWithHttpMessagesAsync(workSpaceId, value, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='floorId'>
            /// </param>
            public static IList<WorkspaceViewModel> ApiWorkspacesByFloorIdGet(this IWerkplekkenBackend operations, long floorId)
            {
                return Task.Factory.StartNew(s => ((IWerkplekkenBackend)s).ApiWorkspacesByFloorIdGetAsync(floorId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='floorId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<WorkspaceViewModel>> ApiWorkspacesByFloorIdGetAsync(this IWerkplekkenBackend operations, long floorId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiWorkspacesByFloorIdGetWithHttpMessagesAsync(floorId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='floorId'>
            /// </param>
            /// <param name='value'>
            /// </param>
            public static void ApiWorkspacesByFloorIdPost(this IWerkplekkenBackend operations, long floorId, WorkspaceViewModel value = default(WorkspaceViewModel))
            {
                Task.Factory.StartNew(s => ((IWerkplekkenBackend)s).ApiWorkspacesByFloorIdPostAsync(floorId, value), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='floorId'>
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiWorkspacesByFloorIdPostAsync(this IWerkplekkenBackend operations, long floorId, WorkspaceViewModel value = default(WorkspaceViewModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiWorkspacesByFloorIdPostWithHttpMessagesAsync(floorId, value, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='floorId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            public static WorkspaceViewModel ApiWorkspacesByFloorIdByIdGet(this IWerkplekkenBackend operations, long floorId, long id)
            {
                return Task.Factory.StartNew(s => ((IWerkplekkenBackend)s).ApiWorkspacesByFloorIdByIdGetAsync(floorId, id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='floorId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkspaceViewModel> ApiWorkspacesByFloorIdByIdGetAsync(this IWerkplekkenBackend operations, long floorId, long id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiWorkspacesByFloorIdByIdGetWithHttpMessagesAsync(floorId, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='floorId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='value'>
            /// </param>
            public static void ApiWorkspacesByFloorIdByIdPut(this IWerkplekkenBackend operations, long floorId, long id, WorkspaceViewModel value = default(WorkspaceViewModel))
            {
                Task.Factory.StartNew(s => ((IWerkplekkenBackend)s).ApiWorkspacesByFloorIdByIdPutAsync(floorId, id, value), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='floorId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiWorkspacesByFloorIdByIdPutAsync(this IWerkplekkenBackend operations, long floorId, long id, WorkspaceViewModel value = default(WorkspaceViewModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiWorkspacesByFloorIdByIdPutWithHttpMessagesAsync(floorId, id, value, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='floorId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiWorkspacesByFloorIdByIdDelete(this IWerkplekkenBackend operations, long floorId, long id)
            {
                Task.Factory.StartNew(s => ((IWerkplekkenBackend)s).ApiWorkspacesByFloorIdByIdDeleteAsync(floorId, id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='floorId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiWorkspacesByFloorIdByIdDeleteAsync(this IWerkplekkenBackend operations, long floorId, long id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiWorkspacesByFloorIdByIdDeleteWithHttpMessagesAsync(floorId, id, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='macAddress'>
            /// </param>
            public static StatusViewModel ApiWorkspaceunitsByMacAddressGet(this IWerkplekkenBackend operations, string macAddress)
            {
                return Task.Factory.StartNew(s => ((IWerkplekkenBackend)s).ApiWorkspaceunitsByMacAddressGetAsync(macAddress), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='macAddress'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StatusViewModel> ApiWorkspaceunitsByMacAddressGetAsync(this IWerkplekkenBackend operations, string macAddress, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiWorkspaceunitsByMacAddressGetWithHttpMessagesAsync(macAddress, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='macAddress'>
            /// </param>
            /// <param name='value'>
            /// </param>
            public static StatusViewModel ApiWorkspaceunitsByMacAddressPost(this IWerkplekkenBackend operations, string macAddress, StatusViewModel value = default(StatusViewModel))
            {
                return Task.Factory.StartNew(s => ((IWerkplekkenBackend)s).ApiWorkspaceunitsByMacAddressPostAsync(macAddress, value), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='macAddress'>
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StatusViewModel> ApiWorkspaceunitsByMacAddressPostAsync(this IWerkplekkenBackend operations, string macAddress, StatusViewModel value = default(StatusViewModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiWorkspaceunitsByMacAddressPostWithHttpMessagesAsync(macAddress, value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
