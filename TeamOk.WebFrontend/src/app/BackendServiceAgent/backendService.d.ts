/*
 * Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { ServiceClientOptions, RequestOptions, ServiceCallback } from 'ms-rest';
import * as models from "./models";

declare class BackendService {
    /**
     * @class
     * Initializes a new instance of the BackendService class.
     * @constructor
     *
     * @param {string} [baseUri] - The base URI of the service.
     *
     * @param {object} [options] - The parameter options
     *
     * @param {Array} [options.filters] - Filters to be added to the request pipeline
     *
     * @param {object} [options.requestOptions] - Options for the underlying request object
     * {@link https://github.com/request/request#requestoptions-callback Options doc}
     *
     * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
     *
     */
    constructor(baseUri: string, options: ServiceClientOptions);

            /**
         * @param {number} locationId
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        apiFloorsByLocationIdGet(locationId: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FloorViewModel[]>): void;
        apiFloorsByLocationIdGet(locationId: number, callback: ServiceCallback<models.FloorViewModel[]>): void;

        /**
         * @param {number} locationId
         * 
         * @param {number} id
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        apiFloorsByLocationIdByIdGet(locationId: number, id: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FloorViewModel>): void;
        apiFloorsByLocationIdByIdGet(locationId: number, id: number, callback: ServiceCallback<models.FloorViewModel>): void;

        /**
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        apiLocationsGet(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LocationViewModel[]>): void;
        apiLocationsGet(callback: ServiceCallback<models.LocationViewModel[]>): void;

        /**
         * @param {number} id
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        apiLocationsByIdGet(id: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LocationViewModel>): void;
        apiLocationsByIdGet(id: number, callback: ServiceCallback<models.LocationViewModel>): void;

        /**
         * @param {number} workSpaceId
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.value]
         * 
         * @param {boolean} [options.value.claimed]
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        apiNotificationsByWorkSpaceIdPost(workSpaceId: number, options: { value? : models.NotificationViewModel, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
        apiNotificationsByWorkSpaceIdPost(workSpaceId: number, callback: ServiceCallback<void>): void;

        /**
         * @param {number} floorId
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        apiWorkspacesByFloorIdGet(floorId: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkspaceViewModel[]>): void;
        apiWorkspacesByFloorIdGet(floorId: number, callback: ServiceCallback<models.WorkspaceViewModel[]>): void;

        /**
         * @param {number} floorId
         * 
         * @param {number} id
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        apiWorkspacesByFloorIdByIdGet(floorId: number, id: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkspaceViewModel>): void;
        apiWorkspacesByFloorIdByIdGet(floorId: number, id: number, callback: ServiceCallback<models.WorkspaceViewModel>): void;

        /**
         * @param {string} macAddress
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        apiWorkspaceunitsByMacAddressGet(macAddress: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StatusViewModel>): void;
        apiWorkspaceunitsByMacAddressGet(macAddress: string, callback: ServiceCallback<models.StatusViewModel>): void;

        /**
         * @param {string} macAddress
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.value]
         * 
         * @param {boolean} [options.value.claimed]
         * 
         * @param {date} [options.value.claimedUntill]
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        apiWorkspaceunitsByMacAddressPost(macAddress: string, options: { value? : models.StatusViewModel, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StatusViewModel>): void;
        apiWorkspaceunitsByMacAddressPost(macAddress: string, callback: ServiceCallback<models.StatusViewModel>): void;
}

export = BackendService;
